package com.microsoft.mail.platform.service;

import microsoft.exchange.webservices.data.core.ExchangeService;
import microsoft.exchange.webservices.data.core.PropertySet;
import microsoft.exchange.webservices.data.core.enumeration.misc.ExchangeVersion;
import microsoft.exchange.webservices.data.core.enumeration.property.BasePropertySet;
import microsoft.exchange.webservices.data.core.enumeration.property.WellKnownFolderName;
import microsoft.exchange.webservices.data.core.enumeration.search.SortDirection;
import microsoft.exchange.webservices.data.core.exception.service.local.ServiceLocalException;
import microsoft.exchange.webservices.data.core.service.folder.CalendarFolder;
import microsoft.exchange.webservices.data.core.service.folder.Folder;
import microsoft.exchange.webservices.data.core.service.item.Appointment;
import microsoft.exchange.webservices.data.core.service.item.EmailMessage;
import microsoft.exchange.webservices.data.core.service.item.Item;
import microsoft.exchange.webservices.data.core.service.schema.AppointmentSchema;
import microsoft.exchange.webservices.data.core.service.schema.EmailMessageSchema;
import microsoft.exchange.webservices.data.core.service.schema.ItemSchema;
import microsoft.exchange.webservices.data.credential.ExchangeCredentials;
import microsoft.exchange.webservices.data.credential.WebCredentials;
import microsoft.exchange.webservices.data.property.complex.Attachment;
import microsoft.exchange.webservices.data.property.complex.AttachmentCollection;
import microsoft.exchange.webservices.data.property.complex.FileAttachment;
import microsoft.exchange.webservices.data.property.complex.ItemAttachment;
import microsoft.exchange.webservices.data.property.complex.ItemId;
import microsoft.exchange.webservices.data.property.complex.MessageBody;
import microsoft.exchange.webservices.data.search.CalendarView;
import microsoft.exchange.webservices.data.search.FindItemsResults;
import microsoft.exchange.webservices.data.search.ItemView;
import microsoft.exchange.webservices.data.search.filter.SearchFilter;

import java.net.URI;
import java.util.*;
/**
 * @author Shantanu Sikdar
 */
public class MSExchangeEmailService {
    private static ExchangeService service;
    private static Integer NUMBER_EMAILS_FETCH = 5; // only latest 5 emails/appointments are fetched.
    /**
     * Firstly check, whether "https://webmail.xxxx.com/ews/Services.wsdl" and "https://webmail.xxxx.com/ews/Exchange.asmx"
     * is accessible, if yes that means the Exchange Webservice is enabled on your MS Exchange.
     */
    static {
        try {
//            service = new ExchangeService(ExchangeVersion.Exchange2010_SP1);
            service = new ExchangeService(ExchangeVersion.Exchange2010_SP2);
//service = new ExchangeService(ExchangeVersion.Exchange2007_SP1); //depending on the version of your Exchange. 
//            service.setUrl(new URI("https://webmail.xxxx.com/ews/Exchange.asmx"));
            service.setUrl(new URI("https://outlook.office365.com/EWS/Exchange.asmx"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * Initialize the Exchange Credentials.
     * Don't forget to replace the "USRNAME","PWD","DOMAIN_NAME" variables.
     */
    public MSExchangeEmailService() {
//        ExchangeCredentials credentials = new WebCredentials("prk054989@outlook.com", "Fzs_3422", "outlook");
        ExchangeCredentials credentials = new WebCredentials("pr330516@outlook.com", "Fzs_3422");
        service.setCredentials(credentials);
        service.setTraceEnabled(true);
    }
    /**
     * Reading one email at a time. Using Item ID of the email.
     * Creating a message data map as a return value.
     */
	public Map<String, String> readEmailItem(ItemId itemId) {
		Map<String, String> messageData = new HashMap();
		try {
			Item itm = Item.bind(service, itemId, PropertySet.FirstClassProperties);
			EmailMessage emailMessage = EmailMessage.bind(service, itm.getId());
			messageData.put("emailItemId", emailMessage.getId().toString());
			messageData.put("subject", emailMessage.getSubject().toString());
			messageData.put("fromAddress", emailMessage.getFrom().getAddress().toString());
			messageData.put("senderName", emailMessage.getSender().getName().toString());
			Date dateTimeCreated = emailMessage.getDateTimeCreated();
			messageData.put("SendDate", dateTimeCreated.toString());
			Date dateTimeRecieved = emailMessage.getDateTimeReceived();
			messageData.put("RecievedDate", dateTimeRecieved.toString());
			messageData.put("Size", emailMessage.getSize() + "");
			messageData.put("emailBody", emailMessage.getBody().toString());

			/*
			 * before checking for item.getHasAttachments(), you should do item.load().
			 * Otherwise there is a chance your code will not load the attachment and
			 * attachmentsCol.getCount() will be 0. Working code with Exchange Server 2010 :
			 */
			itm.load();
			if (emailMessage.getHasAttachments()) {
				System.err.println(emailMessage.getAttachments());
				AttachmentCollection attachmentsCol = emailMessage.getAttachments();
//				for (int i = 0; i < attachmentsCol.getCount(); i++) {
//					FileAttachment attachment = (FileAttachment) attachmentsCol.getPropertyAtIndex(i);
//					attachment.load("C:\\tmp\\" + attachment.getName());
//				}
				
				
				 for (int i = 0; i < attachmentsCol.getCount(); i++) {
					 Attachment attachment = attachmentsCol.getPropertyAtIndex(i);
					 if (attachment instanceof FileAttachment || attachment.getIsInline()) {
						 System.out.println("#######FileAttachment - Represents a file that is attached to an email item###########");
						 FileAttachment fileAttachment = (FileAttachment)attachment;
						 fileAttachment.load("C:\\tmp\\" + attachment.getName());
					 } else if (attachment instanceof ItemAttachment) { 
						 System.out.println(" ########ItemAttachment - Represents an Exchange item that is attached to another Exchange item.###########");
					 }
				 }
			}
			
			
			
//			new MSExchangeEmailService().getAttachment(emailMessage);
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return messageData;
	}
/**
 * Number of email we want to read is defined as NUMBER_EMAILS_FETCH, 
 */
    public List<Map<String, String>>    readEmails() {
        List<Map<String,String>>  msgDataList = new ArrayList<Map<String,String>>  ();
        try {
//            Folder folder = Folder.bind(service, WellKnownFolderName.Inbox);
            Folder folder = Folder.bind(service, WellKnownFolderName.SentItems);
            System.out.println(" Semt Items : "+folder);
            FindItemsResults<Item> results = service.findItems(folder.getId(), new ItemView(NUMBER_EMAILS_FETCH));
            int i = 1;
            for (Item item : results) {
                Map<String,String> messageData = new HashMap<String,String>();
                messageData = readEmailItem(item.getId());
                System.out.println("\nEmails #" + (i++) + ":");
                System.out.println("subject : " + messageData.get("subject").toString());
                System.out.println("Sender : " + messageData.get("senderName").toString());
                msgDataList.add(messageData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return msgDataList;
    }
    /**
     * Reading one appointment at a time. Using Appointment ID of the email.
     * Creating a message data map as a return value.
     */
    public Map<String,String> readAppointment(Appointment appointment) {
        Map<String,String> appointmentData = new HashMap<String,String>();
        try {
            appointmentData.put("appointmentItemId", appointment.getId().toString());
            appointmentData.put("appointmentSubject", appointment.getSubject());
            appointmentData.put("appointmentStartTime", appointment.getStart() + "");
            appointmentData.put("appointmentEndTime", appointment.getEnd() + "");
            //appointmentData.put("appointmentBody", appointment.getBody().toString());
        } catch (ServiceLocalException e) {
            e.printStackTrace();
        }
        return appointmentData;
    }
    /**
     *Number of Appointments we want to read is defined as NUMBER_EMAILS_FETCH,
     *  Here I also considered the start data and end date which is a 30 day span.
     *  We need to set the CalendarView property depending upon the need of ours.   
     */
    public List<Map<String,String>> readAppointments() {
        List<Map<String,String>>  apntmtDataList = new ArrayList<Map<String,String>>  ();
        Calendar now = Calendar.getInstance();
        Date startDate = Calendar.getInstance().getTime();
        now.add(Calendar.DATE, 30);
        Date endDate = now.getTime();
        try {
            CalendarFolder calendarFolder = CalendarFolder.bind(service, WellKnownFolderName.Calendar, new PropertySet());
            CalendarView cView = new CalendarView(startDate, endDate, 5);
            cView.setPropertySet(new PropertySet(AppointmentSchema.Subject, AppointmentSchema.Start, AppointmentSchema.End));// we can set other properties 
            // as well depending upon our need.
            FindItemsResults appointments = calendarFolder.findAppointments(cView);
            int i = 1;
            List<Appointment> appList = appointments.getItems();
            for (Appointment appointment : appList) {
                System.out.println("\nAPPOINTMENT #" + (i++) + ":");
                Map<String,String> appointmentData = new HashMap();
                appointmentData = readAppointment(appointment);
                System.out.println("subject : " + appointmentData.get("appointmentSubject").toString());
                System.out.println("On : " + appointmentData.get("appointmentStartTime").toString());
                apntmtDataList.add(appointmentData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return apntmtDataList;
    }
    public void sendEmails(List<String> recipientsList) {
        try {
            StringBuilder strBldr = new StringBuilder();
            strBldr.append("The client submitted the SendAndSaveCopy request at:");
            strBldr.append(Calendar.getInstance().getTime().toString() + " .");
            strBldr.append("Thanks and Regards");
            strBldr.append("Shantanu Sikdar");
            EmailMessage message = new EmailMessage(service);
            message.setSubject("Test sending email");
            message.setBody(new MessageBody(strBldr.toString()));
            for (String string : recipientsList) {
                message.getToRecipients().add(string);
            }
            message.sendAndSaveCopy();
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("message sent");
    }
    public static void main(String[] args) throws ServiceLocalException, Exception {
        MSExchangeEmailService msees = new MSExchangeEmailService();
        msees.readEmails();
//        msees.readAppointments();
    	
    	
//        List recipientsList = new ArrayList<>();
//        recipientsList.add("email.id1@domain1.com");
//        recipientsList.add("email.id2@domain1.com");
//        recipientsList.add("email.id3@domain2.com");
//        msees.sendEmails(recipientsList);
    	
//    	new MSExchangeEmailService().getAttachment();
    }
    
    
//	public void getAttachment(EmailMessage emailMessage) throws ServiceLocalException, Exception {
//		HashMap<String, HashMap<String, String>> attachments = new HashMap<String, HashMap<String, String>>();
//
//		if (emailMessage.getHasAttachments() || emailMessage.getAttachments().getItems().size() > 0) {
//            //get all the attachments
//            AttachmentCollection attachmentsCol = emailMessage.getAttachments();
//            
//            //loop over the attachments
//            for (int i = 0; i < attachmentsCol.getCount(); i++) {
//            	Attachment attachment = attachmentsCol.getPropertyAtIndex(i);
//            	
//                if (attachment instanceof FileAttachment || attachment.getIsInline()) {
//
//                    attachments.putAll(extractFileAttachments(attachment, properties));
//
//                } else if (attachment instanceof ItemAttachment) { //ItemAttachment - Represents an Exchange item that is attached to another Exchange item.
//
//                    attachments.putAll(extractItemAttachments(service, attachment, properties, appendedBody));
//                }
//            }
//
//		}
//
//	}
    compile 'com.microsoft.graph:microsoft-graph-core:1.0.1'
    compile 'com.microsoft.graph:microsoft-graph:1.7.1'

}
